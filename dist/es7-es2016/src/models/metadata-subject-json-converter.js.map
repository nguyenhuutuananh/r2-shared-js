{"version":3,"file":"metadata-subject-json-converter.js","sourceRoot":"","sources":["../../../../src/models/metadata-subject-json-converter.ts"],"names":[],"mappings":";;AAOA,yCAImB;AAEnB,yDAA6C;AAI7C,MAAa,oBAAoB;IACtB,SAAS,CAAC,CAAU;QACvB,IAAI,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,CAAC,MAAM;YACT,CAAC,CAAC,CAAC,MAAM;YACT,CAAC,CAAC,CAAC,IAAI;YACP,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YAC/B,IAAI,OAAO,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC5B,OAAO,CAAC,CAAC,IAAI,CAAC;aACjB;SAIJ;QACD,OAAO,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,WAAW,CAAC,KAAgB;QAC/B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,MAAM,CAAC,GAAG,IAAI,0BAAO,EAAE,CAAC;YACxB,CAAC,CAAC,IAAI,GAAG,KAAe,CAAC;YACzB,OAAO,CAAC,CAAC;SACZ;QAcD,OAAO,gBAAM,CAAC,WAAW,CAAU,KAAK,EAAE,0BAAO,CAAC,CAAC;IACvD,CAAC;IAEM,2BAA2B;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA1CD,oDA0CC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport {\n    IPropertyConverter,\n    JSON as TAJSON,\n    JsonValue,\n} from \"ta-json-x\";\n\nimport { Subject } from \"./metadata-subject\";\n\n// import { IStringMap } from \"./metadata-multilang\";\n\nexport class JsonSubjectConverter implements IPropertyConverter {\n    public serialize(s: Subject): JsonValue {\n        if (s.Name &&\n            !s.SortAs &&\n            !s.Scheme &&\n            !s.Code &&\n            (!s.Links || !s.Links.length)) {\n            if (typeof s.Name === \"string\") {\n                return s.Name;\n            }\n            // else if (typeof s.Name === \"object\") {\n            //     return s.Name; // IStringMap\n            // }\n        }\n        return TAJSON.serialize(s);\n    }\n\n    public deserialize(value: JsonValue): Subject {\n        if (typeof value === \"string\") {\n            const s = new Subject();\n            s.Name = value as string;\n            return s;\n        }\n        // else if (typeof value === \"object\" && !(value as any)[\"name\"]) { // tslint:disable-line:no-string-literal\n        //     const s = new Subject();\n        //     s.Name = {} as IStringMap;\n        //     const keys = Object.keys(value as any);\n        //     keys.forEach((key: string) => {\n        //         // TODO? check key is BCP47 language tag?\n        //         const val = (value as any)[key];\n        //         if (typeof val === \"string\") {\n        //             (s.Name as IStringMap)[key] = val;\n        //         }\n        //     });\n        //     return s;\n        // }\n        return TAJSON.deserialize<Subject>(value, Subject);\n    }\n\n    public collapseArrayWithSingleItem(): boolean {\n        return true;\n    }\n}\n"]}
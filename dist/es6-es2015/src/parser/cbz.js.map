{"version":3,"file":"cbz.js","sourceRoot":"","sources":["../../../../src/parser/cbz.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as path from \"path\";\n\nimport { Metadata } from \"@models/metadata\";\nimport { Contributor } from \"@models/metadata-contributor\";\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { XML } from \"@r2-utils-js/_utils/xml-js-mapper\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\nimport * as mime from \"mime-types\";\nimport * as slugify from \"slugify\";\nimport * as xmldom from \"xmldom\";\n\nimport { ComicInfo } from \"./comicrack/comicrack\";\nimport { addCoverDimensions } from \"./epub\";\n\nexport async function CbzParsePromise(filePath: string): Promise<Publication> {\n\n    let zip: any;\n    try {\n        zip = await zipLoadPromise(filePath);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        return Promise.reject(\"CBZ zip empty\");\n    }\n\n    const publication = new Publication();\n    publication.Context = [\"https://readium.org/webpub-manifest/context.jsonld\"];\n    publication.Metadata = new Metadata();\n    publication.Metadata.RDFType = \"http://schema.org/ComicIssue\";\n    publication.Metadata.Identifier = filePathToTitle(filePath);\n\n    publication.AddToInternal(\"type\", \"cbz\");\n    publication.AddToInternal(\"zip\", zip);\n\n    let comicInfoEntryName: string | undefined;\n\n    let entries: string[] | undefined;\n    try {\n        entries = await zip.getEntries();\n    } catch (err) {\n        console.log(err);\n        return Promise.reject(\"Problem getting CBZ zip entries\");\n    }\n    if (entries) {\n        for (const entryName of entries) {\n            // console.log(\"++ZIP: entry\");\n\n            // console.log(entryName);\n\n            const link = new Link();\n            link.Href = entryName;\n\n            const mediaType = mime.lookup(entryName);\n            if (mediaType) {\n                // console.log(mediaType);\n\n                link.TypeLink = mediaType as string;\n            } else {\n                console.log(\"!!!!!! NO MEDIA TYPE?!\");\n            }\n\n            if (link.TypeLink && link.TypeLink.startsWith(\"image/\")) {\n                if (!publication.Spine) {\n                    publication.Spine = [];\n                }\n                publication.Spine.push(link);\n\n            } else if (entryName.endsWith(\"ComicInfo.xml\")) {\n                comicInfoEntryName = entryName;\n            }\n        }\n    }\n\n    if (!publication.Metadata.Title) {\n        publication.Metadata.Title = path.basename(filePath);\n    }\n\n    if (comicInfoEntryName) {\n        try {\n            const _b = await comicRackMetadata(zip, comicInfoEntryName, publication);\n            console.log(_b);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return publication;\n}\n\nconst filePathToTitle = (filePath: string): string => {\n    const fileName = path.basename(filePath);\n    return slugify(fileName, \"_\").replace(/[\\.]/g, \"_\");\n};\n\nconst comicRackMetadata = async (zip: IZip, entryName: string, publication: Publication) => {\n    let comicZipStream_: IStreamAndLength;\n    try {\n        comicZipStream_ = await zip.entryStreamPromise(entryName);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n    const comicZipStream = comicZipStream_.stream;\n    let comicZipData: Buffer;\n    try {\n        comicZipData = await streamToBufferPromise(comicZipStream);\n    } catch (err) {\n        console.log(err);\n        return;\n    }\n\n    const comicXmlStr = comicZipData.toString(\"utf8\");\n    const comicXmlDoc = new xmldom.DOMParser().parseFromString(comicXmlStr);\n\n    const comicMeta = XML.deserialize<ComicInfo>(comicXmlDoc, ComicInfo);\n    comicMeta.ZipPath = entryName;\n\n    if (!publication.Metadata) {\n        publication.Metadata = new Metadata();\n    }\n\n    if (comicMeta.Writer) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Author) {\n            publication.Metadata.Author = [];\n        }\n        publication.Metadata.Author.push(cont);\n    }\n\n    if (comicMeta.Penciller) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Penciler) {\n            publication.Metadata.Penciler = [];\n        }\n        publication.Metadata.Penciler.push(cont);\n    }\n\n    if (comicMeta.Colorist) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Colorist) {\n            publication.Metadata.Colorist = [];\n        }\n        publication.Metadata.Colorist.push(cont);\n    }\n\n    if (comicMeta.Inker) {\n        const cont = new Contributor();\n        cont.Name = comicMeta.Writer;\n\n        if (!publication.Metadata.Inker) {\n            publication.Metadata.Inker = [];\n        }\n        publication.Metadata.Inker.push(cont);\n    }\n\n    if (comicMeta.Title) {\n        publication.Metadata.Title = comicMeta.Title;\n    }\n\n    if (!publication.Metadata.Title) {\n        if (comicMeta.Series) {\n            let title = comicMeta.Series;\n            if (comicMeta.Number) {\n                title = title + \" - \" + comicMeta.Number;\n            }\n            publication.Metadata.Title = title;\n        }\n    }\n\n    if (comicMeta.Pages) {\n        // no forEach(), because of await/async within the iteration body\n        // comicMeta.Pages.forEach(async (p) => {\n        for (const p of comicMeta.Pages) {\n            const l = new Link();\n            if (p.Type === \"FrontCover\") {\n                l.AddRel(\"cover\");\n                await addCoverDimensions(publication, l);\n            }\n            if (publication.Spine) {\n                l.Href = publication.Spine[p.Image].Href;\n            }\n            if (p.ImageHeight) {\n                l.Height = p.ImageHeight;\n            }\n            if (p.ImageWidth) {\n                l.Width = p.ImageWidth;\n            }\n            if (p.Bookmark) {\n                l.Title = p.Bookmark;\n            }\n            if (!publication.TOC) {\n                publication.TOC = [];\n            }\n            publication.TOC.push(l);\n        }\n    }\n};\n"]}
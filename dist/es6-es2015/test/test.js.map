{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../test/test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\n\nimport { timeStrToSeconds } from \"@models/media-overlay\";\nimport { Publication } from \"@models/publication\";\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\nimport test from \"ava\";\nimport * as debug_ from \"debug\";\nimport * as filehound from \"filehound\";\nimport * as jsonDiff from \"json-diff\";\nimport { JSON as TAJSON } from \"ta-json-x\";\n\nimport {\n    initGlobalConverters_GENERIC,\n    initGlobalConverters_SHARED,\n} from \"../src/init-globals\";\n\ninitGlobalConverters_SHARED();\ninitGlobalConverters_GENERIC();\n\nconst debug = debug_(\"r2:shared#test\");\n\n// ==========================\n\nasync function fn() {\n    return Promise.resolve(\"foo\");\n}\ntest(\"dummy async test\", async (t) => {\n    debug(\"test ASYNC\");\n    t.is(await fn(), \"foo\");\n});\n\n// ==========================\n\ntest(\"SMIL clock values\", (t) => {\n    t.plan(16);\n\n    t.is(timeStrToSeconds(\"12.345\"), 12.345);\n    t.is(timeStrToSeconds(\"2345ms\"), 2.345);\n    t.is(timeStrToSeconds(\"345ms\"), 0.345);\n    t.is(timeStrToSeconds(\"7.75h\"), 27900);\n    t.is(timeStrToSeconds(\"76.2s\"), 76.2);\n    t.is(timeStrToSeconds(\"00:56.78\"), 56.78);\n    t.is(timeStrToSeconds(\"09:58\"), 598);\n    t.is(timeStrToSeconds(\"09.5:58\"), 628);\n    t.is(timeStrToSeconds(\"0:00:04\"), 4);\n    t.is(timeStrToSeconds(\"0:05:01.2\"), 301.2);\n    t.is(timeStrToSeconds(\"124:59:36\"), 449976);\n    t.is(timeStrToSeconds(\"5:34:31.396\"), 20071.396);\n    t.is(timeStrToSeconds(\"5:34.5:31.396\"), 20101.396);\n\n    t.is(timeStrToSeconds(\"7.5z\"), 7.5);\n    t.is(timeStrToSeconds(\"4:5:34:31.396\"), 0);\n    t.is(timeStrToSeconds(\"\"), 0);\n});\n\n// ==========================\n\nasync function delay(okay: boolean): Promise<boolean> {\n    return new Promise((resolve, _reject) => {\n        setTimeout(() => {\n            resolve(okay);\n        }, 1000);\n    });\n}\n\ntest(\"EPUB parsing (de)serialize roundtrip\", async (t) => {\n\n    const dirPath = path.join(process.cwd(), \"misc/epubs/\");\n\n    const filePaths: string[] = await filehound.create()\n        .discard(\"node_modules\")\n        .depth(5)\n        .paths(dirPath)\n        .ext([\".epub\", \".epub3\"])\n        .find();\n\n    for (const filePath of filePaths) {\n        debug(\"------------------------\");\n        debug(filePath);\n        // debug(\"------------------------\");\n\n        let pub: Publication;\n        try {\n            pub = await PublicationParsePromise(filePath);\n        } catch (err) {\n            console.log(err);\n            continue;\n        }\n        const publicationJson1 = TAJSON.serialize(pub);\n        const publication = TAJSON.deserialize<Publication>(publicationJson1, Publication);\n        const publicationJson2 = TAJSON.serialize(publication);\n\n        const str1 = JSON.stringify(publicationJson1, null, 2);\n        const str2 = JSON.stringify(publicationJson2, null, 2);\n\n        if (str1 !== str2) {\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"#### JSON DIFF\\n\");\n            process.stdout.write(jsonDiff.diffString(publicationJson1, publicationJson2) + \"\\n\");\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"###########################\\n\");\n\n            t.true(await delay(false));\n            return;\n        }\n    }\n\n    t.true(await delay(true));\n});\n"]}